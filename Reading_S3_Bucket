{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "627a57d5",
   "metadata": {},
   "source": [
    "# Reading the CSV from S3 folder and plotting number of `data` tokens"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c38e9708",
   "metadata": {},
   "source": [
    "Now that we've moved the data into a bucket, let's load it into the notebook. We'll need to use boto3 to set up a client and then use the bucket name and file path to load it into a DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d6d41a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing necessary libraries\n",
    "\n",
    "import pandas as pd\n",
    "import boto3\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b622db2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting up a client to access the S3 bucket\n",
    "s3 = boto3.client('s3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dec1644b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting the S3 file path and bucket name\n",
    "bucket_name = 'aws-logs-413438063201-us-east-2'\n",
    "file_path = 'path/eng_1M_1gram_filtered.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "74b8e022",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Downloading the file from S3 and read it into a pandas DataFrame\n",
    "obj = s3.get_object(Bucket=bucket_name, Key=file_path)\n",
    "df = pd.read_csv(obj['Body'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5f271cf",
   "metadata": {},
   "source": [
    "Let's check to see if everything worked."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "56941f51",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>token</th>\n",
       "      <th>year</th>\n",
       "      <th>frequency</th>\n",
       "      <th>pages</th>\n",
       "      <th>books</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>token</td>\n",
       "      <td>year</td>\n",
       "      <td>frequency</td>\n",
       "      <td>pages</td>\n",
       "      <td>books</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>data</td>\n",
       "      <td>1584</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>data</td>\n",
       "      <td>1614</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>data</td>\n",
       "      <td>1627</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>data</td>\n",
       "      <td>1631</td>\n",
       "      <td>22</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   token  year  frequency  pages  books\n",
       "0  token  year  frequency  pages  books\n",
       "1   data  1584         16     14      1\n",
       "2   data  1614          3      2      1\n",
       "3   data  1627          1      1      1\n",
       "4   data  1631         22     18      1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0317c3ac",
   "metadata": {},
   "source": [
    "It seems that the first row is the duplicate of the categories so let's remove it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e2a28f1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# removing row 0\n",
    "df = df.drop(0)\n",
    "\n",
    "# reseting index\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7619e941",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>token</th>\n",
       "      <th>year</th>\n",
       "      <th>frequency</th>\n",
       "      <th>pages</th>\n",
       "      <th>books</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>data</td>\n",
       "      <td>1584</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>data</td>\n",
       "      <td>1614</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>data</td>\n",
       "      <td>1627</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>data</td>\n",
       "      <td>1631</td>\n",
       "      <td>22</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>data</td>\n",
       "      <td>1637</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  token  year frequency pages books\n",
       "0  data  1584        16    14     1\n",
       "1  data  1614         3     2     1\n",
       "2  data  1627         1     1     1\n",
       "3  data  1631        22    18     1\n",
       "4  data  1637         1     1     1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1a5800dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>token</th>\n",
       "      <th>year</th>\n",
       "      <th>frequency</th>\n",
       "      <th>pages</th>\n",
       "      <th>books</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>311</th>\n",
       "      <td>data</td>\n",
       "      <td>2004</td>\n",
       "      <td>201841</td>\n",
       "      <td>93539</td>\n",
       "      <td>3483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>data</td>\n",
       "      <td>2005</td>\n",
       "      <td>197467</td>\n",
       "      <td>88901</td>\n",
       "      <td>3392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>313</th>\n",
       "      <td>data</td>\n",
       "      <td>2006</td>\n",
       "      <td>203669</td>\n",
       "      <td>92960</td>\n",
       "      <td>3449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>314</th>\n",
       "      <td>data</td>\n",
       "      <td>2007</td>\n",
       "      <td>168338</td>\n",
       "      <td>78986</td>\n",
       "      <td>3246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>data</td>\n",
       "      <td>2008</td>\n",
       "      <td>105331</td>\n",
       "      <td>47811</td>\n",
       "      <td>2358</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    token  year frequency  pages books\n",
       "311  data  2004    201841  93539  3483\n",
       "312  data  2005    197467  88901  3392\n",
       "313  data  2006    203669  92960  3449\n",
       "314  data  2007    168338  78986  3246\n",
       "315  data  2008    105331  47811  2358"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbd0734c",
   "metadata": {},
   "source": [
    "Great, now we have the accurate DataFrame. Let's check the shape to make sure it matches the initial."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2d5cf2d6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The DataFrame contains 316 rows and 5 columns.\n"
     ]
    }
   ],
   "source": [
    "#checking shape\n",
    "print(f\"The DataFrame contains {df.shape[0]} rows and {df.shape[1]} columns.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ed50084",
   "metadata": {},
   "source": [
    "Let's check the data types of our DataFrame:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5095e033",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "token        object\n",
       "year         object\n",
       "frequency    object\n",
       "pages        object\n",
       "books        object\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking data types\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb5cd020",
   "metadata": {},
   "source": [
    "The data types are all objects but some columns hold numeric values. Let's convert `year`, `frequency`, `pages`, and `books` to the `float` data type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d50c5e4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting numeric datatypes to float\n",
    "\n",
    "df['year'] = df['year'].astype('float')\n",
    "df['frequency'] = df['frequency'].astype('float')\n",
    "df['pages'] = df['pages'].astype('float')\n",
    "df['books'] = df['books'].astype('float')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d54697db",
   "metadata": {},
   "source": [
    "Now let's check to ensure that everything converted correctly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bbfbb8f4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "token         object\n",
       "year         float64\n",
       "frequency    float64\n",
       "pages        float64\n",
       "books        float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "561fe7a9",
   "metadata": {},
   "source": [
    "The columns are in the correct format and we are ready to start plotting."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b327100",
   "metadata": {},
   "source": [
    "# Plotting the frequency of the word `data` over time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "845ea7ef",
   "metadata": {},
   "source": [
    "Now we can plot the frequency of the word `data` over the years. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8f860aad",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#changing the style of the plot\n",
    "plt.style.use('ggplot')\n",
    "\n",
    "#plotting frequencies\n",
    "plt.plot(df['year'], df['frequency'])\n",
    "\n",
    "#setting xlabel\n",
    "plt.xlabel('Year')\n",
    "\n",
    "#setting ylabel\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "#plotting title\n",
    "plt.title('Occurrences of \"data\" over the years')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "f0b186af",
   "metadata": {},
   "source": [
    "We can see a linear upward trend in the word `data` that suggests that the frequency has been increasing over time. This may be due to the fact that the use of data has become more prevalent in various fields such as science, technology, and business. With the growth of technology and the Internet, there has been an exponential increase in the amount of data that is being generated and analysed, which could be a possible explanation for the trend. Additionally, the increasing use of data-driven decision-making in various industries may also contribute to the upward trend in the frequency of the word data."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:cloud_lab]",
   "language": "python",
   "name": "conda-env-cloud_lab-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
